//1)solution
public List<T> ConvertToList<T>(DataTable dt)
    {
        var columnNames = dt.Columns.Cast<DataColumn>()
                .Select(c => c.ColumnName)
                .ToList();
        var properties = typeof(T).GetProperties();
        return dt.AsEnumerable().Select(row =>
        {
            var objT = Activator.CreateInstance<T>();
            foreach (var pro in properties)
            {
                if (columnNames.Contains(pro.Name))
                {
                    PropertyInfo pI = objT.GetType().GetProperty(pro.Name);
                    if (pro.CanWrite)
                    {
                        pro.SetValue(objT, row[pro.Name] == DBNull.Value ? null : Convert.ChangeType(row[pro.Name], pI.PropertyType));
                    }
                }
            }
            return objT;
        }).ToList();
    }

//------------------------------------------------------------------------------------------------------------
//2)solution
 private static List<T> ConvertDataTable<T>(DataTable dt)
    {
        List<T> data = new List<T>();
        foreach (DataRow row in dt.Rows)
        {
            T item = GetItem<T>(row);
            data.Add(item);
        }
        return data;
    }
    private static T GetItem<T>(DataRow dr)
    {
        Type temp = typeof(T);
        T obj = Activator.CreateInstance<T>();
     
            foreach (DataColumn column in dr.Table.Columns)
            {
                foreach (PropertyInfo pro in temp.GetProperties())
                {
                    if (pro.Name == column.ColumnName)
                    {
                        if (pro.CanWrite)
                        {
                            pro.SetValue(obj, dr[column.ColumnName], null);
                        }
                    }
                    else
                    {
                        continue;
                    }
                }
            }
    
        return obj;
    }
//------------------------------------------------------------------------------------------------------------
//3)solution
public static List<T> BindList<T>(DataTable dt)
    {
       
        var fields = typeof(T).GetProperties();

        List<T> lst = new List<T>();

        foreach (DataRow dr in dt.Rows)
        {
            
            var ob = Activator.CreateInstance<T>();

            foreach (var fieldInfo in fields)
            {
                foreach (DataColumn dc in dt.Columns)
                {
                   
                    if (fieldInfo.Name == dc.ColumnName)
                    {
                       
                        object value = dr[dc.ColumnName];
                        if (fieldInfo.CanWrite)
                        {
                           
                            fieldInfo.SetValue(ob, value);
                        }
                        break;
                    }
                }
            }

            lst.Add(ob);
        }

        return lst;
    }
